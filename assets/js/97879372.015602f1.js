"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[667],{4166:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var r=i(4848),t=i(8453);const s={},o="Connecting Servers",c={id:"connecting-servers",title:"Connecting Servers",description:"Connecting a server to monitor has 2 steps:",source:"@site/docs/connecting-servers.md",sourceDirName:".",slug:"/connecting-servers",permalink:"/docs/connecting-servers",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/connecting-servers.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Monitor Core Setup",permalink:"/docs/core-setup"},next:{title:"Building Images",permalink:"/docs/build-images"}},a={},l=[{value:"Install",id:"install",level:2},{value:"Install the Periphery agent - systemd",id:"install-the-periphery-agent---systemd",level:3},{value:"Install the Periphery agent - container",id:"install-the-periphery-agent---container",level:3},{value:"Manual install steps - binaries",id:"manual-install-steps---binaries",level:3},{value:"Example periphery start command",id:"example-periphery-start-command",level:3},{value:"Passing config files",id:"passing-config-files",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"connecting-servers",children:"Connecting Servers"}),"\n",(0,r.jsx)(n.p,{children:"Connecting a server to monitor has 2 steps:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Install the Periphery agent on the server"}),"\n",(0,r.jsx)(n.li,{children:"Adding the server to monitor via the core API"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Once step 1. is complete, you can just connect the server to Monitor Core from the UI."}),"\n",(0,r.jsx)(n.h2,{id:"install",children:"Install"}),"\n",(0,r.jsxs)(n.p,{children:["You can install Periphery as a systemd managed process, run it as a ",(0,r.jsx)(n.a,{href:"https://github.com/mbecker20/monitor/pkgs/container/periphery",children:"docker container"}),", or do whatever you want with the binary."]}),"\n",(0,r.jsx)(n.p,{children:"Some Periphery actions interact with your hosts file system, like cloning repos, or accessing local compose files.\nFor this reason, runnning periphery in a container can be a bit more complicated.\nAdditionally, Periphery in a container tends to overreport the disks by default, but this can be fixed via some configuration."}),"\n",(0,r.jsx)(n.h3,{id:"install-the-periphery-agent---systemd",children:"Install the Periphery agent - systemd"}),"\n",(0,r.jsx)(n.p,{children:"As root user:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"curl -sSL https://raw.githubusercontent.com/mbecker20/monitor/main/scripts/setup-periphery.py | python3\n"})}),"\n",(0,r.jsx)(n.p,{children:"Periphery can also be installed to run as the calling user, just note this comes with some additional configuration."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"curl -sSL https://raw.githubusercontent.com/mbecker20/monitor/main/scripts/setup-periphery.py | python3 - --user\n"})}),"\n",(0,r.jsxs)(n.p,{children:["You can find more information (and view the script) in the ",(0,r.jsx)(n.a,{href:"https://github.com/mbecker20/monitor/tree/main/scripts",children:"readme"}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsx)(n.p,{children:"This script can be run multiple times without issue, and it won't change existing config after the first run. Just run it again after a Monitor version release, and it will update the periphery version."})}),"\n",(0,r.jsx)(n.h3,{id:"install-the-periphery-agent---container",children:"Install the Periphery agent - container"}),"\n",(0,r.jsx)(n.p,{children:"You can use a docker compose file like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"services:\n  monitor-periphery:\n    image: ghcr.io/mbecker20/periphery:latest # use ghcr.io/mbecker20/periphery:latest-aarch64 for arm support\n    logging:\n      driver: local\n    ports:\n      - 8120:8120\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - monitor-repos:/etc/monitor/repos # manage repos in a docker volume, or change it to an accessible host directory.\n    # environment:\n    #   # If the disk size is overreporting, can use one of these to \n    #   # whitelist / blacklist the disks to filter them, whichever is easier. \n    #   PERIPHERY_INCLUDE_DISK_MOUNTS: /etc/monitor/repos \n    #   PERIPHERY_EXCLUDE_DISK_MOUNTS: /snap\n"})}),"\n",(0,r.jsx)(n.h3,{id:"manual-install-steps---binaries",children:"Manual install steps - binaries"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Download the periphery binary from the latest ",(0,r.jsx)(n.a,{href:"https://github.com/mbecker20/monitor/releases",children:"release"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Create and edit your config files, following the ",(0,r.jsx)(n.a,{href:"https://github.com/mbecker20/monitor/blob/main/config_example/periphery.config.example.toml",children:"config example"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["See the ",(0,r.jsx)(n.a,{href:"https://docs.rs/monitor_client/latest/monitor_client/entities/config/periphery/index.html",children:"periphery config docs"}),"\nfor more information on configuring periphery."]})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Ensure that inbound connectivity is allowed on the port specified in periphery.config.toml (default 8120)."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Install docker. See the ",(0,r.jsx)(n.a,{href:"https://docs.docker.com/engine/install/",children:"docker install docs"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"Ensure that the user which periphery is run as has access to the docker group without sudo."})}),"\n",(0,r.jsxs)(n.ol,{start:"5",children:["\n",(0,r.jsx)(n.li,{children:"Start the periphery binary with your preferred process manager, like systemd."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"example-periphery-start-command",children:"Example periphery start command"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"periphery \\\n\t--config-path /path/to/periphery.config.base.toml \\\n\t--config-path /other_path/to/overide-periphery-config-directory \\\n\t--config-keyword periphery \\\n\t--config-keyword config \\\n\t--merge-nested-config true\n"})}),"\n",(0,r.jsx)(n.h3,{id:"passing-config-files",children:"Passing config files"}),"\n",(0,r.jsxs)(n.p,{children:["Either file paths or directory paths can be passed to ",(0,r.jsx)(n.code,{children:"--config-path"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["When using directories, the file entries can be filtered by name with the ",(0,r.jsx)(n.code,{children:"--config-keyword"})," argument, which can be passed multiple times to add more keywords. If passed, then only config files with file names that contain all keywords will be merged."]}),"\n",(0,r.jsxs)(n.p,{children:["When passing multiple config files, later --config-path given in the command will always overide previous ones. Directory config files are merged in alphabetical order by name, so ",(0,r.jsx)(n.code,{children:"config_b.toml"})," will overide ",(0,r.jsx)(n.code,{children:"config_a.toml"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["There are two ways to merge config files. The default behavior is to completely replace any base fields with whatever fields are present in the overide config. So if you pass ",(0,r.jsx)(n.code,{children:"allowed_ips = []"})," in your overide config, the final allowed_ips will be an empty list as well."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"--merge-nested-config true"})," will merge config fields recursively and extend config array fields."]}),"\n",(0,r.jsxs)(n.p,{children:["For example, with ",(0,r.jsx)(n.code,{children:"--merge-nested-config true"})," you can specify an allowed ip in the base config, and another in the overide config, they will both be present in the final config."]}),"\n",(0,r.jsx)(n.p,{children:"Similarly, you can specify a base docker / github account pair, and extend them with additional accounts in the overide config."})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>c});var r=i(6540);const t={},s=r.createContext(t);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);