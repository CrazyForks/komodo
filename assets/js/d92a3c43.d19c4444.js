"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[864],{5804:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>t,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var s=r(4848),o=r(8453);const i={},c="Resources",l={id:"resources",title:"Resources",description:"Entities like Server, Deployment, and Build all fall under the Resource abstraction. A server is a type of resource, a build is a type of resource, and so on.",source:"@site/docs/resources.md",sourceDirName:".",slug:"/resources",permalink:"/docs/resources",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/resources.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"What is Monitor?",permalink:"/docs/intro"},next:{title:"Core Setup",permalink:"/docs/core-setup"}},t={},d=[];function a(e){const n={code:"code",h1:"h1",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"resources",children:"Resources"}),"\n",(0,s.jsxs)(n.p,{children:["Entities like ",(0,s.jsx)(n.code,{children:"Server"}),", ",(0,s.jsx)(n.code,{children:"Deployment"}),", and ",(0,s.jsx)(n.code,{children:"Build"})," all fall under the ",(0,s.jsx)(n.code,{children:"Resource"})," abstraction. A server is a type of resource, a build is a type of resource, and so on.\nAll resources have common traits, such as a unique ",(0,s.jsx)(n.code,{children:"name"})," and ",(0,s.jsx)(n.code,{children:"id"})," amongst all other resources of the same resource type.\nAll resources can be assigned ",(0,s.jsx)(n.code,{children:"tags"}),", which can be used to group related resources."]}),"\n",(0,s.jsx)(n.p,{children:"Here is a list of the resources and their description:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Server"}),": Represents a connected server.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Holds server config, like the address."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Deployment"}),": Represents a docker container on a server, whether it is actually deployed or not.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Holds deployment config, like the server it should deploy on, and the image / build to deploy."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Build"}),": Represents a docker image.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Holds build config, like the source repo, Dockerfile location, and version"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Repo"}),": Represents a repo on a server, whether it is cloned or not.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Holds repo config, like the source repo, and the ",(0,s.jsx)(n.code,{children:"on_clone"})," and ",(0,s.jsx)(n.code,{children:"on_pull"})," commands, which run after the repo is cloned / pulled"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Procedure"}),": Configure higher level actions by composing lower level actions.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Holds the actions to execute, like ",(0,s.jsx)(n.code,{children:"RunBuild build_1"})," and ",(0,s.jsx)(n.code,{children:"Deploy deployment_1"}),", and the order to execute them"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Alerter"}),": Route the various alerts produced by monitor to alerting endpoints","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Holds the alerting endpoint (Slack channel or Custom http POST), the alerting types to forward (eg. ",(0,s.jsx)(n.code,{children:"ServerUnreachable"})," or ",(0,s.jsx)(n.code,{children:"ContainerStateChange"}),")."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Builder"}),': Represents a server used as the "builder" for builds. Can be connected server or ephemeral AWS server.',"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Holds builder config, like the AWS ami-id and security groups to allow for builder reachability."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ServerTemplate"}),": Configure cloud server templates (currently AWS and Hetzner) to easily launch more instances and auto connect them to Monitor","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Holds the cloud server config"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ResourceSync"}),": Declare Monitor resources in TOML files, push them to a git repo, and sync Monitor config from them.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Holds config for the source repo containing the files. Will display the computed diff and wait for user to execute."}),"\n"]}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>l});var s=r(6540);const o={},i=s.createContext(o);function c(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);